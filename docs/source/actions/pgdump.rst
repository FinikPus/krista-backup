.. _pgdump:

PgDump
======


Оболочка над pgdump.

Параметры:
~~~~~~~~~~

.. csv-table:: 
   :widths: 15, 30, 20
   :header: "название", "описание", "значение"

   "databases", "Имя баз, бэкап которых нужно выполнить.", "[ ] (активен, если mode = 'single')"
   "dest_path","Каталог для файлов с результатом.", "путь к директории"
   "exclusions", "Список паттернов баз, которые стоит игнорировать.", "[ ]"
   "use_re_in_patterns","Использовать регулярные выражения (или unix wildcard).", "false (стандартное значение)"
   "format", "Формат бэкапа.", "directory или custom (стандартное значение)"
   "host", "Имя хоста.", "'' (стандартное значение)"
   "port", "Порт БД.", "5432 (стандартное значение)"
   "user", "Пользователь БД.", "'' (стандартное значение)"
   "password", "Пароль пользователя БД.", "'' (стандартное значение)"
   "opts", "Опции pgdump.", "'' (стандартное значение, строка)"
   "extension", "Расширение файла бэкапа.", "pg_dump (стандартное значение"
   "command_path", "Команда запуска pgdump.", "pg_dump (стандартное значение)"
   "mode", "Режим, определяющий способ выбора баз.", "all (бэкап всех баз) и single (бэкап баз из databases, стандартное значение)"
   "dry", "Не создавать бэкапы (dryrun).
   Во время выполнения будет выполнен запрос к БД для получения списка баз.", "false (стандартное значение)"

Пример:
~~~~~~~

.. code-block:: yaml

  pgdump:
    basename: pgdump
    databases: ['db_test_app']
    dest_path: /backup/db/
    exclusions: ['postgres.*', 'template.*']
    use_re_in_patterns: true
    format: custom
    mode: single
    type: pgdump
    descr: бэкап базы postgresql
