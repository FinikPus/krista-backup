.. _actions_index:

Действия
========

.. toctree::
  :maxdepth: 0
  :titlesonly:
  :hidden:

  action.rst
  archiver.rst
  cleaner.rst
  rsync.rst
  pgdump.rst
  mount_umount.rst
  movebkpperiod.rst
  command.rst
  progress_ticket.rst
  check_backup.rst
  dschecker.rst

.. raw:: html

  <h2>Описание</h2>

``Action`` (действие) - атомарная операция, например: создать архив,
очистка одной папки, и т.п. Остальные действия являются его
наследниками.

.. raw:: html

  <h2>Наследование</h2>

Для действий реализовано наследования свойств через атрибут ``source``.

Например, если уже описано действие для бэкапа 0-го уровня (полного), то для
создания действия бэкапа 1-го уровня (инкрементального) достаточно поменять
уровень и указать первое в ``source``.

Параметры можно унаследовать от действий разных типов. Поэтому ``cleaner``,
который выполняет ротацию файлов созданных при помощи действия ``tar``,
можно реализовать через наследование от
соответствующего действия ``tar`` и указание в конфигурации
количества хранимых файлов.

.. raw:: html

  <h2>Запуск действий в тестовом режиме</h2>

Большинство действий поддерживают запуск в тестовом режиме.

При выполнении в тестовом режиме все изменения логгируются, но не выполняются.
В логе такие записи имеют постфикс ``_DRYRUN``:

.. code:: bash

  2020-04-27 08:15:45.567 server DEBUG action_DRYRUN Меняю текущую директорию на X
  2020-04-27 08:15:45.796 server INFO action_DRYRUN Удаляю файл Y

Например, при запуске ``cleaner`` в тестовом режиме файлы не будут удаляться.

Выполнить действие в тестовом режиме можно следующими способами:

1. Запустить отдельное действие с флагом ``--dry``:

  .. code:: bash

    KristaBackup.py run action_name --dry

2. Указать действие в задании в виде ``[action_name, --dry]`` (:ref:`пример <configuration_task_example>`).

3. Добавить атрибут ``dry`` в описание конфигурации действия (не рекомендуется).


.. raw:: html

  <h3>На данный момент реализованы следующие действия:</h2>

- :ref:`tar <zip>` и :ref:`zip <tar>` выполняют архивацию файлов

- :ref:`pgdump <pgdump>` создаёт бэкапы баз данных ``PostgreSQL``

- :ref:`rsync <rsync>` позволяет работать с ``rsync``

- :ref:`cleaner <cleaner>` реализует механизмы ротации и очистки

- :ref:`move_bkp_period <move_bkp_period>` делает копирование бэкапов

- :ref:`mount <mount>` и :ref:`umount <umount>` позволяют работать с монтированием файловых систем

- :ref:`set_in_progress_ticket <set_in_progress_ticket>`,
  :ref:`unset_in_progress_ticket <unset_in_progress_ticket>`
  и :ref:`check_in_progress_ticket <check_in_progress_ticket>` позволяют
  создавать, удалять и проверять наличие тикетов

- :ref:`command <command>` и :ref:`script <script>` позволяют выполнять
  инструкции в терминале

- :ref:`check_backup <check_backup>` проверяет успешность последнего бэкапа

- :ref:`dschecker <dschecker>` выводит в лог сведения о
  ресурсах файловой системы


.. raw:: html

  <h2>Как создать новый тип действия</h2>


Чтобы создать новое действие нужно:

1. Создать новый класс.
2. Сделать его наследником класса ``Action``.
3. Реализовать ``start()``.

Новый класс нужно зарегистрировать в ``core/actions/__init__.py``.

Для реализации упрощённой записи свойств-списков достаточно соответствующему
атрибуту указать в классе значение ``[]``.


.. raw:: html

  <h3>Примечание</h3>

Для некоторых свойств, которые являются списками, реализована упрощенная
форма записи.

Например, действие ``tar`` имеет атрибут ``exclusions`` и
его можно записать двумя способами:

.. code-block:: yaml

  # запись в виде строки
  exclusions: '*/data/*, */attachments/*, */tmp/*'

  # запись в виде листа
  exclusions:
    - '*/data/*'
    - '*/attachments/*'
    - '*/tmp/*