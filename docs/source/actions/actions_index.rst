.. _actions_index:

Действия
========

.. toctree::
  :maxdepth: 0
  :titlesonly:
  :hidden:

  action.rst
  tar.rst
  cleaner.rst
  rsync.rst
  pgdump.rst
  mount_umount.rst
  movebkpperiod.rst
  progress_ticket.rst
  check_backup.rst
  dschecker.rst

.. raw:: html

  <h2>Описание</h2>

``Action`` (действие, задача) -- атомарная операция, например: создать архив,
очистка одной папки, и т.п.

На данный момент реализованы следующие действия:

- :ref:`tar <usage>` делает архивы бэкапов

- :ref:`pgdump <pgdump>` делает бэкапы баз данных ``PostgreSQL``

- :ref:`rsync <rsync>` позволяет работать с ``rsync``

- :ref:`cleaner <cleaner>` реализует механизмы ротации и очистки

- :ref:`move_bkp_period <move_bkp_period>` делает копирование бэкапов

- :ref:`mount <mount>` и :ref:`umount <umount>` позволяют монтировать
  и отмонтировать fs

- :ref:`set_in_progress_ticket <set_in_progress_ticket>`,
  :ref:`unset_in_progress_ticket <unset_in_progress_ticket>`
  и :ref:`check_in_progress_ticket <check_in_progress_ticket>` позволяют
  создавать, удалять и проверять наличие тикета

- :ref:`check_backup <check_backup>` проверяет успешность последнего бэкапа

- :ref:`dschecker <dschecker>` выводит в лог сведения о
  ресурсах файловой системы

Все действия реализованы наследованием от общего класса ``Action``
и переопределяют абстрактный метод ``start()``.

Также для действий реализовано наследования конфигурируемых свойств через
атрибут ``source``.
Например, если уже описано действие для бекапа 0-го уровня (полного), то для
создания действия бэкапа 1-го уровня (инкрементального) достаточно только
поменять уровень бекапа и указать от кого он наследуется.

Параметры можно унаследовать от разнородных действий. Поэтому ``cleaner``,
который выполняет ротацию файлов созданных при
помощи действия ``tar``, можно реализовать через наследование от
соответствующего действия ``tar`` и указание в конфигурации
количества хранимых файлов.

Свойства в конфигурации всегда должны соответствовать свойствам класса
по названиям.

Для некоторых свойств, которые являются списками, реализована упрощенная
форма записи. Например, действие ``tar`` имеет атрибут ``exclusions`` и
его можно записать двумя способами:

.. code-block:: yaml

  # первый вариант
  exclusions: '*/data/*, */attachments/*, */tmp/*'

  # второй вариант
  exclusions:
    - '*/data/*'
    - '*/attachments/*'
    - '*/tmp/*


.. raw:: html

  <h2>Как создать свой тип действия</h2>


Создать свой тип действий просто -- достаточно создать новый класс,
унаследовать его от ``Action`` и реализовать у него метод ``start()``.

Новый класс нужно зарегистрировать в ``ScheduleRunner.py``:
в свойстве ``action_types`` добавить в конце ``tuple``
(``<имя_в_конфиге>``, ``<Тип>``),где ``<имя_в_конфиге>`` - произвольное
названия для использования в ``config.yaml``, а ``<Тип>`` - имя класса,
который реализует задачу.

Для реализации упрощённой записи свойств-списков достаточно соответствующему
атрибуту указать в классе значение ``[]``.
