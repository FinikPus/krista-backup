Действия
********

"Action" (действие) - атомарная операция, например: создать архив,
очистка одной папки, и т.п. Остальные действия являются его
наследниками.

Для действий реализовано наследования свойств через атрибут "source".

Например, если уже описано действие для бэкапа 0-го уровня (полного),
то для создания действия бэкапа 1-го уровня (инкрементального)
достаточно поменять уровень и указать первое в "source".

Параметры можно унаследовать от действий разных типов. Поэтому
"cleaner", который выполняет ротацию файлов созданных при помощи
действия "tar", можно реализовать через наследование от
соответствующего действия "tar" и указание в конфигурации количества
хранимых файлов.

Большинство действий поддерживают запуск в тестовом режиме.

При выполнении в тестовом режиме все изменения логгируются, но не
выполняются. В логе такие записи имеют постфикс "_DRYRUN":

   2020-04-27 08:15:45.567 server DEBUG action_DRYRUN Меняю текущую директорию на X
   2020-04-27 08:15:45.796 server INFO action_DRYRUN Удаляю файл Y

Например, при запуске "cleaner" в тестовом режиме файлы не будут
удаляться.

Выполнить действие в тестовом режиме можно следующими способами:

1. Запустить отдельное действие с флагом "--dry":

      KristaBackup.py run action_name --dry

2. Указать действие в задании в виде "[action_name, --dry]"
   (пример).

3. Добавить атрибут "dry" в описание конфигурации действия (не
   рекомендуется).

* tar и zip выполняют архивацию файлов

* pgdump создаёт бэкапы баз данных "PostgreSQL"

* rsync позволяет работать с "rsync"

* cleaner реализует механизмы ротации и очистки

* move_bkp_period делает копирование бэкапов

* mount и umount позволяют работать с монтированием файловых систем

* set_in_progress_ticket, unset_in_progress_ticket и
  check_in_progress_ticket позволяют создавать, удалять и проверять
  наличие тикетов

* command и script позволяют выполнять инструкции в терминале

* check_backup проверяет успешность последнего бэкапа

* dschecker выводит в лог сведения о ресурсах файловой системы

Чтобы создать новое действие нужно:

1. Создать новый класс.

2. Сделать его наследником класса "Action".

3. Реализовать "start()".

Новый класс нужно зарегистрировать в "core/actions/__init__.py".

Для реализации упрощённой записи свойств-списков достаточно
соответствующему атрибуту указать в классе значение "[]".

Для некоторых свойств, которые являются списками, реализована
упрощенная форма записи.

Например, действие "tar" имеет атрибут "exclusions" и его можно
записать двумя способами:

   # запись в виде строки
   exclusions: '*/data/*, */attachments/*, */tmp/*'

   # запись в виде листа
   exclusions:
     - '*/data/*'
     - '*/attachments/*'
     - '*/tmp/*
