Действия
********

"Action" (действие, задача) -- атомарная операция, например: создать
архив, очистка одной папки, и т.п.

На данный момент реализованы следующие действия:

* tar делает архивы бэкапов

* pgdump делает бэкапы баз данных "PostgreSQL"

* rsync позволяет работать с "rsync"

* cleaner реализует механизмы ротации и очистки

* move_bkp_period делает копирование бэкапов

* mount и umount позволяют монтировать и отмонтировать fs

* set_in_progress_ticket, unset_in_progress_ticket и
  check_in_progress_ticket позволяют создавать, удалять и проверять
  наличие тикета

* check_backup проверяет успешность последнего бэкапа

* dschecker выводит в лог сведения о ресурсах файловой системы

Все действия реализованы наследованием от общего класса "Action" и
переопределяют абстрактный метод "start()".

Также для действий реализовано наследования конфигурируемых свойств
через атрибут "source". Например, если уже описано действие для бекапа
0-го уровня (полного), то для создания действия бэкапа 1-го уровня
(инкрементального) достаточно только поменять уровень бекапа и указать
от кого он наследуется.

Параметры можно унаследовать от разнородных действий. Поэтому
"cleaner", который выполняет ротацию файлов созданных при помощи
действия "tar", можно реализовать через наследование от
соответствующего действия "tar" и указание в конфигурации количества
хранимых файлов.

Свойства в конфигурации всегда должны соответствовать свойствам класса
по названиям.

Для некоторых свойств, которые являются списками, реализована
упрощенная форма записи. Например, действие "tar" имеет атрибут
"exclusions" и его можно записать двумя способами:

   # первый вариант
   exclusions: '*/data/*, */attachments/*, */tmp/*'

   # второй вариант
   exclusions:
     - '*/data/*'
     - '*/attachments/*'
     - '*/tmp/*

Создать свой тип действий просто -- достаточно создать новый класс,
унаследовать его от "Action" и реализовать у него метод "start()".

Новый класс нужно зарегистрировать в "ScheduleRunner.py": в свойстве
"action_types" добавить в конце "tuple" ("<имя_в_конфиге>",
"<Тип>"),где "<имя_в_конфиге>" - произвольное названия для
использования в "config.yaml", а "<Тип>" - имя класса, который
реализует задачу.

Для реализации упрощённой записи свойств-списков достаточно
соответствующему атрибуту указать в классе значение "[]".
